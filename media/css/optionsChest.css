.optionsChest {
    width: 90%;
    height: 100%;
    margin: 1.1rem auto 1rem auto;

    display: flex;
    flex-direction: column;

    --labelRadius: 4px;
    --optionSize: 37.5px;
    --optionBorderWidth: 2px;
    --optionColour: #000000;
    --optionIndent: 1.15em;
    --optionTickWidth: 2px;
    --optionTickColour: #ffffff;
    --labelColour: #ffffff;
    --optionDisplay: inline-flex;

    /* outline */
    --outlineColour: #000000;
    --outlineWidth: 2px;
    --outlineOffset: 6px;

    /* disabled */
    --optionCursorDisabled: not-allowed;
    --optionOpacityDisabled: 0.24;

    /** for debug
    background-color: aliceblue;
     */
}

.optionChest {
    margin: 0.65rem auto 0.65rem 0;
    display: var(--optionDisplay);
    position: relative;
}

.option {
    margin: auto;
    color: #000000;
    line-height: 1.25;
    font-size: 1.15em;
    font-weight: 500;
}

.option::before {
    opacity: 0;
}

.optionInput {
    /*
      The pattern by Sara Soueidan https://www.sarasoueidan.com/blog/inclusively-hiding-and-styling-checkboxes-and-radio-buttons/
    */
    width: var(--optionSize);
    height: var(--optionSize);
    opacity: 0;

    position: absolute;
    top: 0;
    left: 0;
    margin: 0;
}

/* 1. Calculation of the gap for the custom checkbox */
.optionLabel {
    display: inline-flex;
    min-height: var(--optionSize);
    padding-left: calc(var(--optionSize) + var(--optionIndent));
}

.optionInput:not(:disabled) ~ .optionLabel {
    cursor: pointer;
}

/* 1. Ems helps to calculate size of the checkbox */
.optionLabel::before,
.optionLabel::after {
    content: "";
    box-sizing: border-box;

    /** Size of checkbox... */
    width: 1em;
    height: 1em;
    font-size: var(--optionSize); /* 1 */

    /* can put margin-top here to move box, but then tick positioning is skewed */
    position: absolute;
    left: 0;
}

.optionLabel::before {
    border: var(--optionBorderWidth) solid var(--optionColour);
    z-index: 2;
}

.optionInput:not(:disabled) ~ .optionLabel::after {
    background-color: var(--optionColour);
    opacity: 0;
}

.optionInput:not(:disabled):checked ~ .optionLabel::after {
    opacity: 1;
}

/* The arrow size and position depends from sizes of square because I needed an arrow correct positioning from the top left corner of the element option
    1. Ems helps to calculate size and position of the arrow */
.optionInput:not(:disabled) ~ .optionLabel .option::before {
    content: "";
    width: 0;
    height: 0;
    font-size: var(--optionSize); /* 1 */

    border-left-width: 0;
    border-bottom-width: 0;
    border-left-style: solid;
    border-bottom-style: solid;
    border-color: var(--optionTickColour);

    position: absolute;
    /** Useless? */
    top: .5428em;
    left: .25em;
    z-index: 3;

    transform-origin: left top;
    transform: rotate(-40deg) skew(10deg);
}

.optionInput:not(:disabled):checked ~ .optionLabel .option::before {
    width: .4em;
    height: .2em;
    border-left-width: var(--optionTickWidth);
    border-bottom-width: var(--optionTickWidth);
}

/*
        ========================================================
                                States
        ========================================================
 */

/* focus state */
.optionChest:focus-within {
    outline: var(--outlineWidth) solid var(--outlineColour);
    outline-offset: var(--outlineOffset);
}

/* The demo skin */
.optionLabel::before,
.optionLabel::after {
    border-radius: var(--labelRadius);
    background-color: var(--labelColour);
}

/* The animation of switching states */
.optionInput:not(:disabled) ~ .optionLabel::before,
.optionInput:not(:disabled) ~ .optionLabel::after {
    opacity: 1;
    transform-origin: center center;
    will-change: transform;
    transition: transform .2s ease-out;
}

.optionInput:not(:disabled) ~ .optionLabel::before {
    transform: rotateY(0deg);
    transition-delay: .2s;
}

.optionInput:not(:disabled) ~ .optionLabel::after {
    transform: rotateY(90deg);
}

.optionInput:not(:disabled):checked ~ .optionLabel::before {
    transform: rotateY(-90deg);
    transition-delay: 0s;
}

.optionInput:not(:disabled):checked ~ .optionLabel::after {
    transform: rotateY(0deg);
    transition-delay: .2s;
}

.optionInput:not(:disabled):checked ~ .optionLabel .option::before {
    opacity: 1;
    transition: opacity .1s ease-out .3s, width .1s ease-out .5s, height .2s ease-out .3s;
}

/* disabled state */
.optionInput:disabled ~ .optionLabel {
    opacity: var(--optionOpacityDisabled);
    cursor: var(--optionCursorDisabled);
}